#pragma once
#include "aumMonitorableAudioUnit.h"

/******************************************************************************/
/* WARNING: THIS CLASS WAS GENERATED BY THE FOLLOWING FUNCTION:               */
/*                                                                            */
/*     aumUnit_Generic::generateClassFileForAudioUnit(string deviceName);     */
/*                                                                            */
/* IF YOU EDIT THIS FILE, YOU RISK HAVING YOUR CHANGES OVERWRITTEN THE NEXT   */
/* TIME THE FILE IS RE-WRITTEN BY THIS FUNCTION. TO EDIT THIS FILE, PLEASE    */
/* COPY IT TO ANY OTHER FOLDER, RENAME THE CLASS, AND THEN MAKE EDITS.        */
/******************************************************************************/

class aumUnit_AUMatrixReverb : public aumMonitorableAudioUnit
{
public:
    //Dry/Wet Mix
    //min: 0, max: 100, default: 100
    const static int dry_wet_mix = 0;

    //Small/Large Mix
    //min: 0, max: 100, default: 72
    const static int small_large_mix = 1;

    //Small Size
    //min: 0.0001, max: 0.05, default: 0.026721
    const static int small_size = 2;

    //Large Size
    //min: 0.005, max: 0.15, default: 0.0718
    const static int large_size = 3;

    //Pre-Delay
    //min: 0.001, max: 0.03, default: 0.015795
    const static int pre_delay = 4;

    //Large Delay
    //min: 0.001, max: 0.1, default: 0.00991
    const static int large_delay = 5;

    //Small Density
    //min: 0, max: 1, default: 0.52
    const static int small_density = 6;

    //Large Density
    //min: 0, max: 1, default: 0.74
    const static int large_density = 7;

    //Large Delay Range
    //min: 0, max: 1, default: 0.485
    const static int large_delay_range = 8;

    //Small HiFreq Absorption
    //min: 0.1, max: 1, default: 0.849
    const static int small_hifreq_absorption = 9;

    //Large HiFreq Absorption
    //min: 0.1, max: 1, default: 0.4155
    const static int large_hifreq_absorption = 10;

    //Small Delay Range
    //min: 0, max: 1, default: 0.58042
    const static int small_delay_range = 11;

    //Modulation Rate
    //min: 0.001, max: 2, default: 1.68014
    const static int modulation_rate = 12;

    //Modulation Depth
    //min: 0, max: 1, default: 0.515
    const static int modulation_depth = 13;

    //Filter Frequency
    //min: 10, max: 22050, default: 800
    const static int filter_frequency = 14;

    //Filter Bandwidth
    //min: 0.05, max: 4, default: 3
    const static int filter_bandwidth = 15;

    //Filter Gain
    //min: -18, max: 18, default: 0
    const static int filter_gain = 16;

    //These variables store the most recenty recorded values
    //of each of the parameters, for recording and detection
    AudioUnitParameterValue previous_dry_wet_mix;
    AudioUnitParameterValue previous_small_large_mix;
    AudioUnitParameterValue previous_small_size;
    AudioUnitParameterValue previous_large_size;
    AudioUnitParameterValue previous_pre_delay;
    AudioUnitParameterValue previous_large_delay;
    AudioUnitParameterValue previous_small_density;
    AudioUnitParameterValue previous_large_density;
    AudioUnitParameterValue previous_large_delay_range;
    AudioUnitParameterValue previous_small_hifreq_absorption;
    AudioUnitParameterValue previous_large_hifreq_absorption;
    AudioUnitParameterValue previous_small_delay_range;
    AudioUnitParameterValue previous_modulation_rate;
    AudioUnitParameterValue previous_modulation_depth;
    AudioUnitParameterValue previous_filter_frequency;
    AudioUnitParameterValue previous_filter_bandwidth;
    AudioUnitParameterValue previous_filter_gain;

    void setup(string _unitName) {
        aumManagedAudioUnit::setup(_unitName, 'aufx', 'mrev', 'appl', "aumUnit_AUMatrixReverb");
    }

    void doPrintChanges() {
        compareAndPrint("dry_wet_mix", previous_dry_wet_mix, get(dry_wet_mix));
        compareAndPrint("small_large_mix", previous_small_large_mix, get(small_large_mix));
        compareAndPrint("small_size", previous_small_size, get(small_size));
        compareAndPrint("large_size", previous_large_size, get(large_size));
        compareAndPrint("pre_delay", previous_pre_delay, get(pre_delay));
        compareAndPrint("large_delay", previous_large_delay, get(large_delay));
        compareAndPrint("small_density", previous_small_density, get(small_density));
        compareAndPrint("large_density", previous_large_density, get(large_density));
        compareAndPrint("large_delay_range", previous_large_delay_range, get(large_delay_range));
        compareAndPrint("small_hifreq_absorption", previous_small_hifreq_absorption, get(small_hifreq_absorption));
        compareAndPrint("large_hifreq_absorption", previous_large_hifreq_absorption, get(large_hifreq_absorption));
        compareAndPrint("small_delay_range", previous_small_delay_range, get(small_delay_range));
        compareAndPrint("modulation_rate", previous_modulation_rate, get(modulation_rate));
        compareAndPrint("modulation_depth", previous_modulation_depth, get(modulation_depth));
        compareAndPrint("filter_frequency", previous_filter_frequency, get(filter_frequency));
        compareAndPrint("filter_bandwidth", previous_filter_bandwidth, get(filter_bandwidth));
        compareAndPrint("filter_gain", previous_filter_gain, get(filter_gain));
    }

    void doRecordParams() {
        previous_dry_wet_mix = get(dry_wet_mix);
        previous_small_large_mix = get(small_large_mix);
        previous_small_size = get(small_size);
        previous_large_size = get(large_size);
        previous_pre_delay = get(pre_delay);
        previous_large_delay = get(large_delay);
        previous_small_density = get(small_density);
        previous_large_density = get(large_density);
        previous_large_delay_range = get(large_delay_range);
        previous_small_hifreq_absorption = get(small_hifreq_absorption);
        previous_large_hifreq_absorption = get(large_hifreq_absorption);
        previous_small_delay_range = get(small_delay_range);
        previous_modulation_rate = get(modulation_rate);
        previous_modulation_depth = get(modulation_depth);
        previous_filter_frequency = get(filter_frequency);
        previous_filter_bandwidth = get(filter_bandwidth);
        previous_filter_gain = get(filter_gain);
    }
};