#pragma once
#include "aumMonitorableAudioUnit.h"

/******************************************************************************/
/* WARNING: THIS CLASS WAS GENERATED BY THE FOLLOWING FUNCTION:               */
/*                                                                            */
/*     aumUnit_Generic::generateClassFileForAudioUnit(string deviceName);     */
/*                                                                            */
/* IF YOU EDIT THIS FILE, YOU RISK HAVING YOUR CHANGES OVERWRITTEN THE NEXT   */
/* TIME THE FILE IS RE-WRITTEN BY THIS FUNCTION. TO EDIT THIS FILE, PLEASE    */
/* COPY IT TO ANY OTHER FOLDER, RENAME THE CLASS, AND THEN MAKE EDITS.        */
/******************************************************************************/

class aumUnit_TALNoiseMaker : public aumMonitorableAudioUnit
{
public:
    //No name found
    //min: 0, max: 1, default: 0
    const static int unnamed1 = 0;

    //volume
    //min: 0, max: 1, default: 0.408
    const static int volume = 1;

    //filtertype
    //min: 0, max: 1, default: 0
    const static int filtertype = 2;

    //cutoff
    //min: 0, max: 1, default: 1
    const static int cutoff = 3;

    //resonance
    //min: 0, max: 1, default: 0
    const static int resonance = 4;

    //keyfollow
    //min: 0, max: 1, default: 0
    const static int keyfollow = 5;

    //filtercontour
    //min: 0, max: 1, default: 0.5
    const static int filtercontour = 6;

    //filterattack
    //min: 0, max: 1, default: 0
    const static int filterattack = 7;

    //filterdecay
    //min: 0, max: 1, default: 0
    const static int filterdecay = 8;

    //filtersustain
    //min: 0, max: 1, default: 1
    const static int filtersustain = 9;

    //filterrelease
    //min: 0, max: 1, default: 0
    const static int filterrelease = 10;

    //ampattack
    //min: 0, max: 1, default: 0
    const static int ampattack = 11;

    //ampdecay
    //min: 0, max: 1, default: 0
    const static int ampdecay = 12;

    //ampsustain
    //min: 0, max: 1, default: 1
    const static int ampsustain = 13;

    //amprelease
    //min: 0, max: 1, default: 0
    const static int amprelease = 14;

    //osc1volume
    //min: 0, max: 1, default: 0.8
    const static int osc1volume = 15;

    //osc2volume
    //min: 0, max: 1, default: 0
    const static int osc2volume = 16;

    //osc3volume
    //min: 0, max: 1, default: 0.8
    const static int osc3volume = 17;

    //oscmastertune
    //min: 0, max: 1, default: 0.5
    const static int oscmastertune = 18;

    //osc1tune
    //min: 0, max: 1, default: 0.25
    const static int osc1tune = 19;

    //osc2tune
    //min: 0, max: 1, default: 0.5
    const static int osc2tune = 20;

    //osc1finetune
    //min: 0, max: 1, default: 0.5
    const static int osc1finetune = 21;

    //osc2finetune
    //min: 0, max: 1, default: 0.5
    const static int osc2finetune = 22;

    //osc1waveform
    //min: 0, max: 1, default: 0
    const static int osc1waveform = 23;

    //osc2waveform
    //min: 0, max: 1, default: 0
    const static int osc2waveform = 24;

    //oscsync
    //min: 0, max: 1, default: 0
    const static int oscsync = 25;

    //lfo1waveform
    //min: 0, max: 1, default: 0
    const static int lfo1waveform = 26;

    //lfo2waveform
    //min: 0, max: 1, default: 0
    const static int lfo2waveform = 27;

    //lfo1rate
    //min: 0, max: 1, default: 0
    const static int lfo1rate = 28;

    //lfo2rate
    //min: 0, max: 1, default: 0
    const static int lfo2rate = 29;

    //lfo1amount
    //min: 0, max: 1, default: 0.5
    const static int lfo1amount = 30;

    //lfo2amount
    //min: 0, max: 1, default: 0.5
    const static int lfo2amount = 31;

    //lfo1destination
    //min: 0, max: 1, default: 0
    const static int lfo1destination = 32;

    //lfo2destination
    //min: 0, max: 1, default: 0
    const static int lfo2destination = 33;

    //lfo1phase
    //min: 0, max: 1, default: 0
    const static int lfo1phase = 34;

    //lfo2phase
    //min: 0, max: 1, default: 0
    const static int lfo2phase = 35;

    //osc2fm
    //min: 0, max: 1, default: 0
    const static int osc2fm = 36;

    //osc2phase
    //min: 0, max: 1, default: 0
    const static int osc2phase = 37;

    //osc1pw
    //min: 0, max: 1, default: 0.5
    const static int osc1pw = 38;

    //osc1phase
    //min: 0, max: 1, default: 0.5
    const static int osc1phase = 39;

    //transpose
    //min: 0, max: 1, default: 0.5
    const static int transpose = 40;

    //freeadattack
    //min: 0, max: 1, default: 0
    const static int freeadattack = 41;

    //freeaddecay
    //min: 0, max: 1, default: 0
    const static int freeaddecay = 42;

    //freeadamount
    //min: 0, max: 1, default: 0
    const static int freeadamount = 43;

    //freeaddestination
    //min: 0, max: 1, default: 0
    const static int freeaddestination = 44;

    //lfo1sync
    //min: 0, max: 1, default: 0
    const static int lfo1sync = 45;

    //lfo1keytrigger
    //min: 0, max: 1, default: 0
    const static int lfo1keytrigger = 46;

    //lfo2sync
    //min: 0, max: 1, default: 0
    const static int lfo2sync = 47;

    //lfo2keytrigger
    //min: 0, max: 1, default: 0
    const static int lfo2keytrigger = 48;

    //portamento
    //min: 0, max: 1, default: 0
    const static int portamento = 49;

    //portamentomode
    //min: 0, max: 1, default: 0
    const static int portamentomode = 50;

    //voices
    //min: 0, max: 1, default: 0
    const static int voices = 51;

    //velocityvolume
    //min: 0, max: 1, default: 0
    const static int velocityvolume = 52;

    //velocitycontour
    //min: 0, max: 1, default: 0
    const static int velocitycontour = 53;

    //velocitycutoff
    //min: 0, max: 1, default: 0
    const static int velocitycutoff = 54;

    //pitchwheelcutoff
    //min: 0, max: 1, default: 0
    const static int pitchwheelcutoff = 55;

    //pitchwheelpitch
    //min: 0, max: 1, default: 0
    const static int pitchwheelpitch = 56;

    //ringmodulation
    //min: 0, max: 1, default: 0
    const static int ringmodulation = 57;

    //chorus1enable
    //min: 0, max: 1, default: 0
    const static int chorus1enable = 58;

    //chorus2enable
    //min: 0, max: 1, default: 0
    const static int chorus2enable = 59;

    //reverbwet
    //min: 0, max: 1, default: 0
    const static int reverbwet = 60;

    //reverbdecay
    //min: 0, max: 1, default: 0.5
    const static int reverbdecay = 61;

    //reverbpredelay
    //min: 0, max: 1, default: 0
    const static int reverbpredelay = 62;

    //reverbhighcut
    //min: 0, max: 1, default: 0
    const static int reverbhighcut = 63;

    //reverblowcut
    //min: 0, max: 1, default: 1
    const static int reverblowcut = 64;

    //oscbitcrusher
    //min: 0, max: 1, default: 1
    const static int oscbitcrusher = 65;

    //highpass
    //min: 0, max: 1, default: 0
    const static int highpass = 66;

    //detune
    //min: 0, max: 1, default: 0
    const static int detune = 67;

    //vintagenoise
    //min: 0, max: 1, default: 0
    const static int vintagenoise = 68;

    //No name found
    //min: 0, max: 1, default: 0
    const static int unnamed2 = 69;

    //No name found
    //min: 0, max: 1, default: 0
    const static int unnamed3 = 70;

    //envelopeeditordest1
    //min: 0, max: 1, default: 0
    const static int envelopeeditordest1 = 71;

    //envelopeeditorspeed
    //min: 0, max: 1, default: 0
    const static int envelopeeditorspeed = 72;

    //envelopeeditoramount
    //min: 0, max: 1, default: 0
    const static int envelopeeditoramount = 73;

    //envelopeoneshot
    //min: 0, max: 1, default: 0
    const static int envelopeoneshot = 74;

    //envelopefixtempo
    //min: 0, max: 1, default: 0
    const static int envelopefixtempo = 75;

    //No name found
    //min: 0, max: 1, default: 0
    const static int unnamed4 = 76;

    //No name found
    //min: 0, max: 1, default: 1
    const static int unnamed5 = 77;

    //No name found
    //min: 0, max: 1, default: 0
    const static int unnamed6 = 78;

    //No name found
    //min: 0, max: 1, default: 0
    const static int unnamed7 = 79;

    //No name found
    //min: 0, max: 1, default: 1
    const static int unnamed8 = 80;

    //filterdrive
    //min: 0, max: 1, default: 0
    const static int filterdrive = 81;

    //delaywet
    //min: 0, max: 1, default: 0
    const static int delaywet = 82;

    //delaytime
    //min: 0, max: 1, default: 0.5
    const static int delaytime = 83;

    //delaysync
    //min: 0, max: 1, default: 0
    const static int delaysync = 84;

    //delayfactorl
    //min: 0, max: 1, default: 0
    const static int delayfactorl = 85;

    //delayfactorr
    //min: 0, max: 1, default: 0
    const static int delayfactorr = 86;

    //delayhighshelf
    //min: 0, max: 1, default: 0
    const static int delayhighshelf = 87;

    //delaylowshelf
    //min: 0, max: 1, default: 0
    const static int delaylowshelf = 88;

    //delayfeedback
    //min: 0, max: 1, default: 0.5
    const static int delayfeedback = 89;

    //No name found
    //min: 0, max: 1, default: 0
    const static int unnamed9 = 90;

    //No name found
    //min: 0, max: 1, default: 0
    const static int unnamed10 = 91;

    //These variables store the most recenty recorded values
    //of each of the parameters, for recording and detection
    AudioUnitParameterValue previous_unnamed1;
    AudioUnitParameterValue previous_volume;
    AudioUnitParameterValue previous_filtertype;
    AudioUnitParameterValue previous_cutoff;
    AudioUnitParameterValue previous_resonance;
    AudioUnitParameterValue previous_keyfollow;
    AudioUnitParameterValue previous_filtercontour;
    AudioUnitParameterValue previous_filterattack;
    AudioUnitParameterValue previous_filterdecay;
    AudioUnitParameterValue previous_filtersustain;
    AudioUnitParameterValue previous_filterrelease;
    AudioUnitParameterValue previous_ampattack;
    AudioUnitParameterValue previous_ampdecay;
    AudioUnitParameterValue previous_ampsustain;
    AudioUnitParameterValue previous_amprelease;
    AudioUnitParameterValue previous_osc1volume;
    AudioUnitParameterValue previous_osc2volume;
    AudioUnitParameterValue previous_osc3volume;
    AudioUnitParameterValue previous_oscmastertune;
    AudioUnitParameterValue previous_osc1tune;
    AudioUnitParameterValue previous_osc2tune;
    AudioUnitParameterValue previous_osc1finetune;
    AudioUnitParameterValue previous_osc2finetune;
    AudioUnitParameterValue previous_osc1waveform;
    AudioUnitParameterValue previous_osc2waveform;
    AudioUnitParameterValue previous_oscsync;
    AudioUnitParameterValue previous_lfo1waveform;
    AudioUnitParameterValue previous_lfo2waveform;
    AudioUnitParameterValue previous_lfo1rate;
    AudioUnitParameterValue previous_lfo2rate;
    AudioUnitParameterValue previous_lfo1amount;
    AudioUnitParameterValue previous_lfo2amount;
    AudioUnitParameterValue previous_lfo1destination;
    AudioUnitParameterValue previous_lfo2destination;
    AudioUnitParameterValue previous_lfo1phase;
    AudioUnitParameterValue previous_lfo2phase;
    AudioUnitParameterValue previous_osc2fm;
    AudioUnitParameterValue previous_osc2phase;
    AudioUnitParameterValue previous_osc1pw;
    AudioUnitParameterValue previous_osc1phase;
    AudioUnitParameterValue previous_transpose;
    AudioUnitParameterValue previous_freeadattack;
    AudioUnitParameterValue previous_freeaddecay;
    AudioUnitParameterValue previous_freeadamount;
    AudioUnitParameterValue previous_freeaddestination;
    AudioUnitParameterValue previous_lfo1sync;
    AudioUnitParameterValue previous_lfo1keytrigger;
    AudioUnitParameterValue previous_lfo2sync;
    AudioUnitParameterValue previous_lfo2keytrigger;
    AudioUnitParameterValue previous_portamento;
    AudioUnitParameterValue previous_portamentomode;
    AudioUnitParameterValue previous_voices;
    AudioUnitParameterValue previous_velocityvolume;
    AudioUnitParameterValue previous_velocitycontour;
    AudioUnitParameterValue previous_velocitycutoff;
    AudioUnitParameterValue previous_pitchwheelcutoff;
    AudioUnitParameterValue previous_pitchwheelpitch;
    AudioUnitParameterValue previous_ringmodulation;
    AudioUnitParameterValue previous_chorus1enable;
    AudioUnitParameterValue previous_chorus2enable;
    AudioUnitParameterValue previous_reverbwet;
    AudioUnitParameterValue previous_reverbdecay;
    AudioUnitParameterValue previous_reverbpredelay;
    AudioUnitParameterValue previous_reverbhighcut;
    AudioUnitParameterValue previous_reverblowcut;
    AudioUnitParameterValue previous_oscbitcrusher;
    AudioUnitParameterValue previous_highpass;
    AudioUnitParameterValue previous_detune;
    AudioUnitParameterValue previous_vintagenoise;
    AudioUnitParameterValue previous_unnamed2;
    AudioUnitParameterValue previous_unnamed3;
    AudioUnitParameterValue previous_envelopeeditordest1;
    AudioUnitParameterValue previous_envelopeeditorspeed;
    AudioUnitParameterValue previous_envelopeeditoramount;
    AudioUnitParameterValue previous_envelopeoneshot;
    AudioUnitParameterValue previous_envelopefixtempo;
    AudioUnitParameterValue previous_unnamed4;
    AudioUnitParameterValue previous_unnamed5;
    AudioUnitParameterValue previous_unnamed6;
    AudioUnitParameterValue previous_unnamed7;
    AudioUnitParameterValue previous_unnamed8;
    AudioUnitParameterValue previous_filterdrive;
    AudioUnitParameterValue previous_delaywet;
    AudioUnitParameterValue previous_delaytime;
    AudioUnitParameterValue previous_delaysync;
    AudioUnitParameterValue previous_delayfactorl;
    AudioUnitParameterValue previous_delayfactorr;
    AudioUnitParameterValue previous_delayhighshelf;
    AudioUnitParameterValue previous_delaylowshelf;
    AudioUnitParameterValue previous_delayfeedback;
    AudioUnitParameterValue previous_unnamed9;
    AudioUnitParameterValue previous_unnamed10;

    void doPrintChanges() {
        compareAndPrint("unnamed1", previous_unnamed1, get(unnamed1));
        compareAndPrint("volume", previous_volume, get(volume));
        compareAndPrint("filtertype", previous_filtertype, get(filtertype));
        compareAndPrint("cutoff", previous_cutoff, get(cutoff));
        compareAndPrint("resonance", previous_resonance, get(resonance));
        compareAndPrint("keyfollow", previous_keyfollow, get(keyfollow));
        compareAndPrint("filtercontour", previous_filtercontour, get(filtercontour));
        compareAndPrint("filterattack", previous_filterattack, get(filterattack));
        compareAndPrint("filterdecay", previous_filterdecay, get(filterdecay));
        compareAndPrint("filtersustain", previous_filtersustain, get(filtersustain));
        compareAndPrint("filterrelease", previous_filterrelease, get(filterrelease));
        compareAndPrint("ampattack", previous_ampattack, get(ampattack));
        compareAndPrint("ampdecay", previous_ampdecay, get(ampdecay));
        compareAndPrint("ampsustain", previous_ampsustain, get(ampsustain));
        compareAndPrint("amprelease", previous_amprelease, get(amprelease));
        compareAndPrint("osc1volume", previous_osc1volume, get(osc1volume));
        compareAndPrint("osc2volume", previous_osc2volume, get(osc2volume));
        compareAndPrint("osc3volume", previous_osc3volume, get(osc3volume));
        compareAndPrint("oscmastertune", previous_oscmastertune, get(oscmastertune));
        compareAndPrint("osc1tune", previous_osc1tune, get(osc1tune));
        compareAndPrint("osc2tune", previous_osc2tune, get(osc2tune));
        compareAndPrint("osc1finetune", previous_osc1finetune, get(osc1finetune));
        compareAndPrint("osc2finetune", previous_osc2finetune, get(osc2finetune));
        compareAndPrint("osc1waveform", previous_osc1waveform, get(osc1waveform));
        compareAndPrint("osc2waveform", previous_osc2waveform, get(osc2waveform));
        compareAndPrint("oscsync", previous_oscsync, get(oscsync));
        compareAndPrint("lfo1waveform", previous_lfo1waveform, get(lfo1waveform));
        compareAndPrint("lfo2waveform", previous_lfo2waveform, get(lfo2waveform));
        compareAndPrint("lfo1rate", previous_lfo1rate, get(lfo1rate));
        compareAndPrint("lfo2rate", previous_lfo2rate, get(lfo2rate));
        compareAndPrint("lfo1amount", previous_lfo1amount, get(lfo1amount));
        compareAndPrint("lfo2amount", previous_lfo2amount, get(lfo2amount));
        compareAndPrint("lfo1destination", previous_lfo1destination, get(lfo1destination));
        compareAndPrint("lfo2destination", previous_lfo2destination, get(lfo2destination));
        compareAndPrint("lfo1phase", previous_lfo1phase, get(lfo1phase));
        compareAndPrint("lfo2phase", previous_lfo2phase, get(lfo2phase));
        compareAndPrint("osc2fm", previous_osc2fm, get(osc2fm));
        compareAndPrint("osc2phase", previous_osc2phase, get(osc2phase));
        compareAndPrint("osc1pw", previous_osc1pw, get(osc1pw));
        compareAndPrint("osc1phase", previous_osc1phase, get(osc1phase));
        compareAndPrint("transpose", previous_transpose, get(transpose));
        compareAndPrint("freeadattack", previous_freeadattack, get(freeadattack));
        compareAndPrint("freeaddecay", previous_freeaddecay, get(freeaddecay));
        compareAndPrint("freeadamount", previous_freeadamount, get(freeadamount));
        compareAndPrint("freeaddestination", previous_freeaddestination, get(freeaddestination));
        compareAndPrint("lfo1sync", previous_lfo1sync, get(lfo1sync));
        compareAndPrint("lfo1keytrigger", previous_lfo1keytrigger, get(lfo1keytrigger));
        compareAndPrint("lfo2sync", previous_lfo2sync, get(lfo2sync));
        compareAndPrint("lfo2keytrigger", previous_lfo2keytrigger, get(lfo2keytrigger));
        compareAndPrint("portamento", previous_portamento, get(portamento));
        compareAndPrint("portamentomode", previous_portamentomode, get(portamentomode));
        compareAndPrint("voices", previous_voices, get(voices));
        compareAndPrint("velocityvolume", previous_velocityvolume, get(velocityvolume));
        compareAndPrint("velocitycontour", previous_velocitycontour, get(velocitycontour));
        compareAndPrint("velocitycutoff", previous_velocitycutoff, get(velocitycutoff));
        compareAndPrint("pitchwheelcutoff", previous_pitchwheelcutoff, get(pitchwheelcutoff));
        compareAndPrint("pitchwheelpitch", previous_pitchwheelpitch, get(pitchwheelpitch));
        compareAndPrint("ringmodulation", previous_ringmodulation, get(ringmodulation));
        compareAndPrint("chorus1enable", previous_chorus1enable, get(chorus1enable));
        compareAndPrint("chorus2enable", previous_chorus2enable, get(chorus2enable));
        compareAndPrint("reverbwet", previous_reverbwet, get(reverbwet));
        compareAndPrint("reverbdecay", previous_reverbdecay, get(reverbdecay));
        compareAndPrint("reverbpredelay", previous_reverbpredelay, get(reverbpredelay));
        compareAndPrint("reverbhighcut", previous_reverbhighcut, get(reverbhighcut));
        compareAndPrint("reverblowcut", previous_reverblowcut, get(reverblowcut));
        compareAndPrint("oscbitcrusher", previous_oscbitcrusher, get(oscbitcrusher));
        compareAndPrint("highpass", previous_highpass, get(highpass));
        compareAndPrint("detune", previous_detune, get(detune));
        compareAndPrint("vintagenoise", previous_vintagenoise, get(vintagenoise));
        compareAndPrint("unnamed2", previous_unnamed2, get(unnamed2));
        compareAndPrint("unnamed3", previous_unnamed3, get(unnamed3));
        compareAndPrint("envelopeeditordest1", previous_envelopeeditordest1, get(envelopeeditordest1));
        compareAndPrint("envelopeeditorspeed", previous_envelopeeditorspeed, get(envelopeeditorspeed));
        compareAndPrint("envelopeeditoramount", previous_envelopeeditoramount, get(envelopeeditoramount));
        compareAndPrint("envelopeoneshot", previous_envelopeoneshot, get(envelopeoneshot));
        compareAndPrint("envelopefixtempo", previous_envelopefixtempo, get(envelopefixtempo));
        compareAndPrint("unnamed4", previous_unnamed4, get(unnamed4));
        compareAndPrint("unnamed5", previous_unnamed5, get(unnamed5));
        compareAndPrint("unnamed6", previous_unnamed6, get(unnamed6));
        compareAndPrint("unnamed7", previous_unnamed7, get(unnamed7));
        compareAndPrint("unnamed8", previous_unnamed8, get(unnamed8));
        compareAndPrint("filterdrive", previous_filterdrive, get(filterdrive));
        compareAndPrint("delaywet", previous_delaywet, get(delaywet));
        compareAndPrint("delaytime", previous_delaytime, get(delaytime));
        compareAndPrint("delaysync", previous_delaysync, get(delaysync));
        compareAndPrint("delayfactorl", previous_delayfactorl, get(delayfactorl));
        compareAndPrint("delayfactorr", previous_delayfactorr, get(delayfactorr));
        compareAndPrint("delayhighshelf", previous_delayhighshelf, get(delayhighshelf));
        compareAndPrint("delaylowshelf", previous_delaylowshelf, get(delaylowshelf));
        compareAndPrint("delayfeedback", previous_delayfeedback, get(delayfeedback));
        compareAndPrint("unnamed9", previous_unnamed9, get(unnamed9));
        compareAndPrint("unnamed10", previous_unnamed10, get(unnamed10));
    }

    void doRecordParams() {
        previous_unnamed1 = get(unnamed1);
        previous_volume = get(volume);
        previous_filtertype = get(filtertype);
        previous_cutoff = get(cutoff);
        previous_resonance = get(resonance);
        previous_keyfollow = get(keyfollow);
        previous_filtercontour = get(filtercontour);
        previous_filterattack = get(filterattack);
        previous_filterdecay = get(filterdecay);
        previous_filtersustain = get(filtersustain);
        previous_filterrelease = get(filterrelease);
        previous_ampattack = get(ampattack);
        previous_ampdecay = get(ampdecay);
        previous_ampsustain = get(ampsustain);
        previous_amprelease = get(amprelease);
        previous_osc1volume = get(osc1volume);
        previous_osc2volume = get(osc2volume);
        previous_osc3volume = get(osc3volume);
        previous_oscmastertune = get(oscmastertune);
        previous_osc1tune = get(osc1tune);
        previous_osc2tune = get(osc2tune);
        previous_osc1finetune = get(osc1finetune);
        previous_osc2finetune = get(osc2finetune);
        previous_osc1waveform = get(osc1waveform);
        previous_osc2waveform = get(osc2waveform);
        previous_oscsync = get(oscsync);
        previous_lfo1waveform = get(lfo1waveform);
        previous_lfo2waveform = get(lfo2waveform);
        previous_lfo1rate = get(lfo1rate);
        previous_lfo2rate = get(lfo2rate);
        previous_lfo1amount = get(lfo1amount);
        previous_lfo2amount = get(lfo2amount);
        previous_lfo1destination = get(lfo1destination);
        previous_lfo2destination = get(lfo2destination);
        previous_lfo1phase = get(lfo1phase);
        previous_lfo2phase = get(lfo2phase);
        previous_osc2fm = get(osc2fm);
        previous_osc2phase = get(osc2phase);
        previous_osc1pw = get(osc1pw);
        previous_osc1phase = get(osc1phase);
        previous_transpose = get(transpose);
        previous_freeadattack = get(freeadattack);
        previous_freeaddecay = get(freeaddecay);
        previous_freeadamount = get(freeadamount);
        previous_freeaddestination = get(freeaddestination);
        previous_lfo1sync = get(lfo1sync);
        previous_lfo1keytrigger = get(lfo1keytrigger);
        previous_lfo2sync = get(lfo2sync);
        previous_lfo2keytrigger = get(lfo2keytrigger);
        previous_portamento = get(portamento);
        previous_portamentomode = get(portamentomode);
        previous_voices = get(voices);
        previous_velocityvolume = get(velocityvolume);
        previous_velocitycontour = get(velocitycontour);
        previous_velocitycutoff = get(velocitycutoff);
        previous_pitchwheelcutoff = get(pitchwheelcutoff);
        previous_pitchwheelpitch = get(pitchwheelpitch);
        previous_ringmodulation = get(ringmodulation);
        previous_chorus1enable = get(chorus1enable);
        previous_chorus2enable = get(chorus2enable);
        previous_reverbwet = get(reverbwet);
        previous_reverbdecay = get(reverbdecay);
        previous_reverbpredelay = get(reverbpredelay);
        previous_reverbhighcut = get(reverbhighcut);
        previous_reverblowcut = get(reverblowcut);
        previous_oscbitcrusher = get(oscbitcrusher);
        previous_highpass = get(highpass);
        previous_detune = get(detune);
        previous_vintagenoise = get(vintagenoise);
        previous_unnamed2 = get(unnamed2);
        previous_unnamed3 = get(unnamed3);
        previous_envelopeeditordest1 = get(envelopeeditordest1);
        previous_envelopeeditorspeed = get(envelopeeditorspeed);
        previous_envelopeeditoramount = get(envelopeeditoramount);
        previous_envelopeoneshot = get(envelopeoneshot);
        previous_envelopefixtempo = get(envelopefixtempo);
        previous_unnamed4 = get(unnamed4);
        previous_unnamed5 = get(unnamed5);
        previous_unnamed6 = get(unnamed6);
        previous_unnamed7 = get(unnamed7);
        previous_unnamed8 = get(unnamed8);
        previous_filterdrive = get(filterdrive);
        previous_delaywet = get(delaywet);
        previous_delaytime = get(delaytime);
        previous_delaysync = get(delaysync);
        previous_delayfactorl = get(delayfactorl);
        previous_delayfactorr = get(delayfactorr);
        previous_delayhighshelf = get(delayhighshelf);
        previous_delaylowshelf = get(delaylowshelf);
        previous_delayfeedback = get(delayfeedback);
        previous_unnamed9 = get(unnamed9);
        previous_unnamed10 = get(unnamed10);
    }
};